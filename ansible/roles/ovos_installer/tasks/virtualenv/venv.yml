- name: Copy Python requirements.txt files
  ansible.builtin.template:
    src: "{{ item.file }}.j2"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "0644"
  loop:
    - {
        "file": "virtualenv/core-requirements.txt",
        "dest": "/tmp/core-requirements.txt",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "file": "virtualenv/gui-requirements.txt",
        "dest": "/tmp/gui-requirements.txt",
        "state": "{{ true if (ovos_installer_feature_gui | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "file": "virtualenv/skills-requirements.txt",
        "dest": "/tmp/skills-requirements.txt",
        "state": "{{ true if (ovos_installer_feature_skills | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "file": "virtualenv/extra-skills-requirements.txt",
        "dest": "/tmp/extra-skills-requirements.txt",
        "state": "{{ true if (ovos_installer_feature_extra_skills | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "file": "virtualenv/listener-requirements.txt",
        "dest": "/tmp/listener-requirements.txt",
        "state": "{{ true if ovos_installer_profile == 'listener' else false }}",
      }
    - {
        "file": "virtualenv/satellite-requirements.txt",
        "dest": "/tmp/satellite-requirements.txt",
        "state": "{{ true if ovos_installer_profile == 'satellite' else false }}",
      }
    - {
        "file": "virtualenv/server-requirements.txt",
        "dest": "/tmp/server-requirements.txt",
        "state": "{{ true if ovos_installer_profile == 'server' else false }}",
      }
  when: item.state | bool

- name: Create {{ ovos_installer_user_home }}/.venvs/ovos Python venv with tflite_runtime
  ansible.builtin.pip:
    name: tflite_runtime
    virtualenv: "{{ ovos_installer_user_home }}/.venvs/ovos"
    virtualenv_command: "{{ ansible_python.executable }} -m venv"
    extra_args: "--trusted-host whl.smartgic.io -f https://whl.smartgic.io"
  when: ovos_installer_cpu_is_capable | bool
  ignore_errors: yes
  register: tflite_install_result

- name: Warn if tflite_runtime installation failed
  ansible.builtin.debug:
    msg: "tflite_runtime installation failed. This is optional for wake word detection. You can use alternative wake word engines."
  when: 
    - ovos_installer_cpu_is_capable | bool
    - tflite_install_result is failed

- name: Create {{ ovos_installer_user_home }}/.venvs/ovos Python venv without tflite_runtime
  ansible.builtin.pip:
    name: wheel
    virtualenv: "{{ ovos_installer_user_home }}/.venvs/ovos"
    virtualenv_command: "{{ ansible_python.executable }} -m venv"
  when: not ovos_installer_cpu_is_capable | bool

- name: Install ggwave Python library
  ansible.builtin.pip:
    name: ggwave
    virtualenv: "{{ ovos_installer_user_home }}/.venvs/ovos"
    extra_args: "--trusted-host whl.smartgic.io -f https://whl.smartgic.io"
  when: ansible_architecture == "aarch64" or ansible_architecture == "x86_64"

- name: Install Open Voice OS in Python venv
  vars:
    _pip_args: "{{ '--pre' if ovos_installer_channel == 'development' else '' }}"
  ansible.builtin.pip:
    requirements: "{{ item.file }}"
    virtualenv: "{{ ovos_installer_user_home }}/.venvs/ovos"
    extra_args: "{{ _pip_args }}"
    state: latest
  register: _ovos_install_venv
  until: _ovos_install_venv is success
  retries: 5
  delay: 5
  loop:
    - {
        "file": "/tmp/core-requirements.txt",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "file": "/tmp/gui-requirements.txt",
        "state": "{{ true if (ovos_installer_feature_gui | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "file": "/tmp/skills-requirements.txt",
        "state": "{{ true if (ovos_installer_feature_skills | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "file": "/tmp/extra-skills-requirements.txt",
        "state": "{{ true if (ovos_installer_feature_extra_skills | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "file": "/tmp/listener-requirements.txt",
        "state": "{{ true if ovos_installer_profile == 'listener' else false }}",
      }
    - {
        "file": "/tmp/satellite-requirements.txt",
        "state": "{{ true if ovos_installer_profile == 'satellite' else false }}",
      }
    - {
        "file": "/tmp/server-requirements.txt",
        "state": "{{ true if ovos_installer_profile == 'server' else false }}",
      }
  when: item.state | bool
  tags:
    - skip_ansible_lint

- name: Ensure numpy==1.26.4 Python library is installed
  ansible.builtin.pip:
    name: numpy==1.26.4
    virtualenv: "{{ ovos_installer_user_home }}/.venvs/ovos"
    state: present

# We are not using the file module but the command module because of performances "issue".
# file module takes about 50 seconds on slow devices to finish.
- name: Change files ownership of {{ ovos_installer_user_home }}/.venvs/ovos
  ansible.builtin.command:
    cmd: |
      chown -R {{ ovos_installer_user }}:{{ ovos_installer_group }} {{ ovos_installer_user_home }}/.venvs/ovos
  changed_when: false

- name: Add VIRTUAL_ENV variable to .bashrc and update {{ ovos_installer_user }}'s PATH
  vars:
    _path: "{{ ovos_installer_user_home }}/.venvs/ovos/bin"
  ansible.builtin.lineinfile:
    path: "{{ ovos_installer_user_home }}/.bashrc"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    owner: "{{ ovos_installer_user }}"
    group: "{{ ovos_installer_group }}"
    mode: "0644"
    state: "{{ ovos_installer_uninstall }}"
  loop:
    - {"line": "VIRTUAL_ENV={{ _path }}", "regexp": "^VIRTUAL_ENV"}
    - {"line": "PATH=$PATH:{{ _path }}", "regexp": "^PATH"}
  when: ovos_installer_i2c_devices | from_json | length < 1
  tags:
    - always

- name: Add auto Python virtualenv loading on auto-detected devices
  ansible.builtin.lineinfile:
    path: "{{ ovos_installer_user_home }}/.bashrc"
    line: "source {{ ovos_installer_user_home }}/.venvs/ovos/bin/activate"
    regexp: "^source {{ ovos_installer_user_home }}/.venvs/ovos/bin/activate"
    owner: "{{ ovos_installer_user }}"
    group: "{{ ovos_installer_group }}"
    mode: "0644"
    state: "{{ ovos_installer_uninstall }}"
  when: ovos_installer_i2c_devices | from_json | length >= 1
  tags:
    - always

- name: Generate _identity.json
  become: true
  become_user: "{{ ovos_installer_user }}"
  ansible.builtin.shell:
    cmd: |
      hivemind-client set-identity \
        --key {{ ovos_installer_satellite_key }} \
        --password {{ ovos_installer_satellite_password }} \
        --host {{ ovos_installer_listener_host }} \
        --port {{ ovos_installer_listener_port | default(5678) }} \
        --siteid {{ ovos_installer_site_id | default("voice-sat-1") }}
    executable: /bin/bash
  environment:
    PATH: "{{ ovos_installer_user_home }}/.venvs/ovos/bin"
    VIRTUAL_ENV: "{{ ovos_installer_user_home }}/.venvs/ovos"
  changed_when: false
  when: ovos_installer_profile == "satellite"

- name: Run ovos-config for auto-configuration of STT and TTS based on language
  vars:
    _ovos_config_tts_gender: "{{ '--female' if ovos_installer_locale in ['eu-ES', 'gl-ES'] else '--male' }}"
  become: true
  become_user: "{{ ovos_installer_user }}"
  ansible.builtin.shell:
    cmd: |
      ovos-config autoconfigure --lang {{ ovos_installer_locale }} {{ _ovos_config_tts_gender }}
    executable: /bin/bash
  environment:
    PATH: "{{ ovos_installer_user_home }}/.venvs/ovos/bin"
    VIRTUAL_ENV: "{{ ovos_installer_user_home }}/.venvs/ovos"
  changed_when: false
  when: ovos_installer_profile != "server"

- name: Remove {{ ovos_installer_user_home }}/.venvs/ovos Python virtualenv and requirements.txt files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ ovos_installer_user_home }}/.venvs/ovos"
    - /tmp/core-requirements.txt
    - /tmp/gui-requirements.txt
    - /tmp/skills-requirements.txt
    - /tmp/extra-skills-requirements.txt
    - /tmp/listener-requirements.txt
    - /tmp/satellite-requirements.txt
    - /tmp/server-requirements.txt
    - /opt/mark1
    - /opt/sj201
    - "{{ ovos_installer_user_home }}/.local/bin/ovos-messagebus"
  when: ovos_installer_cleaning | bool
  tags:
    - uninstall
